#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('prueba2:server');
var http = require('http');
const { Server } = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server);

let users=0;
let usuarios=[];

io.on('connection', (socket) => {
  
  socket.on('registroUsuario', (usuario) => {

    const nombreUsuarioExistente = usuarios.find(user => user.username === usuario.username);
    if (nombreUsuarioExistente) {
      // Enviar un mensaje al cliente indicando que el nombre de usuario ya está en uso
      socket.emit('usuarioNoDisponible', 'El nombre de usuario ya está en uso. Por favor, elige otro nombre de usuario.');
      return; // Detener el proceso de registro
    } else {
      socket.emit('usuarioDisponible')
      users++;
      io.emit('entradaUsuario', 'Hay '+users+' usuarios en línea')
      socket.broadcast.emit('avisos', usuario.username+' entró al chat')
  
      socket.username=usuario.username;
      socket.status=usuario.status;
      socket.profilePic=usuario.profilePic;
  
      usuario.id=socket.id;
  
      usuarios.push(usuario)
  
      // Emitir evento solo al cliente que se está registrando para actualizar su propia interfaz
      socket.emit('nuevoUsuario', usuarios);
  
      // Emitir evento a todos los clientes para actualizar la lista de usuarios
      io.emit('nuevoUsuario', usuarios);
  
      socket.on('mensaje', (msg)=>{
        if (msg.para=='publico' || msg.para=='deportes' || msg.para=='javascript'){
          socket.broadcast.emit('mensaje', msg)
        } else {
          destino = usuarios.find(user => user.username === msg.para);
          socket.to(destino.id).emit('mensaje', msg)
        }
      })
  
      socket.on('escribiendo', (msg) => {
        msg.username=socket.id;
        socket.broadcast.emit('escribiendo', msg);
      })
  
      socket.on('disconnect', () => {
        users--;
        // Remover al usuario del array cuando se desconecta
        usuarios = usuarios.filter(user => user.id !== socket.id);
        socket.broadcast.emit('avisos', socket.username+' salió al chat')
        // Emitir el nuevo array de usuarios a todos los clientes
        io.emit('nuevoUsuario', usuarios);
      }); 
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
